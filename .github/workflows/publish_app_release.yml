name: app-build-action
#推送Tag时触发
on:
  push:
    tags:
      - "v*"
jobs:
  build-mac-ios-android:
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      #签出代码 
      - uses: actions/checkout@v4
        with:
          ref: master

      #APK签名设置
      - name: Download Android keystore
        id: android_keystore
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: keystore.jks
          encodedString: ${{ secrets.KEYSTORE_BASE64 }}
      - name: Create key.properties
        run: |
          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > simple_live_app/android/key.properties
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> simple_live_app/android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> simple_live_app/android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> simple_live_app/android/key.properties
     
      #设置JAVA环境
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: "17"
          cache: 'gradle'
      
      #设置Flutter
      - name: Flutter action
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.x'
          cache: true 

      # 打开MAC Desktop支持
      - name: Enable Flutter Desktop
        run: flutter config --enable-macos-desktop

      #更新Flutter的packages
      - name: Restore packages
        run: |
          cd simple_live_app
          flutter pub get

      # 安装appdmg npm install -g appdmg
      - name: Install appdmg
        run: npm install -g appdmg

      # 设置flutter_distributor环境
      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor

      #打包APK
      - name: Build APK
        run: |
          cd simple_live_app
          flutter build apk --release --split-per-abi
      
      #上传APK至Artifacts
      - name: Upload APK to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: android
          path: |
            simple_live_app/build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
            simple_live_app/build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
            simple_live_app/build/app/outputs/flutter-apk/app-x86_64-release.apk

      #打包iOS
      - name: Build IPA
        run: |
          cd simple_live_app
          flutter build ios --release --no-codesign
      
      #创建未签名ipa
      - name: Create IPA
        run: |
          cd simple_live_app
          mkdir build/ios/iphoneos/Payload
          cp -R build/ios/iphoneos/Runner.app build/ios/iphoneos/Payload/Runner.app
          cd build/ios/iphoneos/
          zip -q -r ios_no_sign.ipa Payload
          cd ../../..
      
      #上传IPA至Artifacts
      - name: Upload IPA to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ios
          path: |
            simple_live_app/build/ios/iphoneos/ios_no_sign.ipa
      
      # 打包MAC
      - name: Build MacOS
        run: |
          cd simple_live_app
          flutter_distributor package --platform macos --targets dmg,zip --skip-clean

      # 上传MAC至Artifacts
      - name: Upload MacOS to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mac
          path: |
            simple_live_app/build/dist/*/*.dmg
            simple_live_app/build/dist/*/*.zip

      #读取版本信息
      - name: Read version
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: assets/app_version.json
      - name: Echo version
        run: echo "${{ fromJson(steps.version.outputs.content).version }}"
      - name: Echo version content
        run: echo "${{ fromJson(steps.version.outputs.content).version_desc }}"

      #上传至Release
      - name: Upload Release
        uses: softprops/action-gh-release@v1
        with:
          name: "${{ fromJson(steps.version.outputs.content).version }}"
          body: "${{ fromJson(steps.version.outputs.content).version_desc }}"
          prerelease: ${{ fromJson(steps.version.outputs.content).prerelease }}
          token: ${{ secrets.TOKEN }}
          files: |
            simple_live_app/build/app/outputs/flutter-apk/app-x86_64-release.apk
            simple_live_app/build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
            simple_live_app/build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
            simple_live_app/build/ios/iphoneos/ios_no_sign.ipa
            simple_live_app/build/dist/*/*.dmg
            simple_live_app/build/dist/*/*.zip
      #完成
      - run: echo "🍏 This job's status is ${{ job.status }}."

  # 打包Linux
  build-linux:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      # 签出代码
      - uses: actions/checkout@v4
        with:
          ref: dev
      # 设置Flutter环境
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.x"
          cache: true
      # 安装依赖
      - name: Update apt-get
        run: sudo apt-get update
      - name: Install Dependencies
        run: sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libmpv-dev mpv
      # 打开Linux Desktop支持
      - name: Enable Flutter Desktop
        run: flutter config --enable-linux-desktop
      # 更新Flutter的packages
      - name: Restore Packages
        run: |
          cd simple_live_app
          flutter pub get
      # 设置flutter_distributor环境
      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor
      # build Linux ZIP\DMG
      - name: Build Linux
        run: |
          cd simple_live_app
          flutter_distributor package --platform linux --arch=arm64 --targets deb,zip --skip-clean
      # 上传Linux包至Artifacts
      - name: Upload Linux APP to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: |
            simple_live_app/build/dist/*/*.deb
            simple_live_app/build/dist/*/*.zip


  # 打包Linux ARM64
  build-linux-arm64:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - architecture: arm64
    permissions:
      contents: write
    steps:
      # 签出代码
      - uses: actions/checkout@v4
        with:
          ref: dev
  
      # 设置Flutter环境
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.x"
          cache: true
  
      # 安装依赖
      - name: Update apt-get
        run: sudo apt-get update
      - name: Install Dependencies
        run: sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libmpv-dev mpv qemu qemu-user-static qemu-utils binfmt-support qemu-system-misc
  
      # 设置QEMU以支持ARM64
      - name: Set up QEMU
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker buildx create --use --platform linux/amd64,linux/arm64
  
      # 注意：Flutter的桌面支持通常不需要QEMU来交叉编译，但确保所有工具链正确安装是关键。
  
      # 打开Linux Desktop支持
      - name: Enable Flutter Desktop
        run: flutter config --enable-linux-desktop
  
      # 更新Flutter的packages
      - name: Restore Packages
        run: |
          cd simple_live_app
          flutter pub get
  
      # 设置flutter_distributor环境
      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor
  
      # build Linux ARM64 ZIP/DEB
      - name: Build Linux ARM64
        run: |
          cd simple_live_app
          flutter config --target-platform linux-arm64
          flutter build linux --release --target-platform linux-arm64
          # 注意：flutter_distributor可能不支持直接指定arm64，可能需要手动处理或使用其他工具打包
          # flutter_distributor package --platform linux --arch=arm64 --targets deb,zip --skip-clean # 这行可能需要调整或替换为其他命令
  
          # 示例手动打包命令（需要根据实际情况调整）
          # zip -r simple_live_app_linux_arm64.zip build/linux/arm64/release/bundle/
  
      # 上传Linux包至Artifacts
      - name: Upload Linux ARM64 APP to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64
          path: |
            simple_live_app/build/linux/arm64/release/*.deb  # 根据实际构建输出调整路径
            simple_live_app/simple_live_app_linux_arm64.zip  # 如果使用了上面的zip命令
      # 读取版本信息
      - name: Read version
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: assets/app_version.json
      - name: Echo version
        run: echo "${{ fromJson(steps.version.outputs.content).version }}"
      - name: Echo version content
        run: echo "${{ fromJson(steps.version.outputs.content).version_desc }}"

      #上传至Release
      - name: Upload Release
        uses: softprops/action-gh-release@v1
        with:
          name: "${{ fromJson(steps.version.outputs.content).version }}"
          body: "${{ fromJson(steps.version.outputs.content).version_desc }}"
          prerelease: ${{ fromJson(steps.version.outputs.content).prerelease }}
          token: ${{ secrets.TOKEN }}
          files: |
            simple_live_app/build/dist/*/*.deb
            simple_live_app/build/dist/*/*.zip
        #完成
      - run: echo "🍏 Linux job's status is ${{ job.status }}."

  # 打包Windows
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      # 签出代码
      - uses: actions/checkout@v4
        with:
          ref: dev
      # 设置Flutter环境
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.x"
          cache: true
      - name: Enable Flutter Desktop
        run: flutter config --enable-windows-desktop
      - name: Restore Packages
        run: |
          cd simple_live_app
          flutter pub get
      # 设置flutter_distributor环境
      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor
      # build Windows ZIP\MSIX
      - name: Build Windows
        run: |
          cd simple_live_app
          flutter_distributor package --platform windows --targets msix,zip --skip-clean

      # 上传Windows至Artifacts
      - name: Upload Windows APP to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: |
            simple_live_app/build/dist/*/*.msix
            simple_live_app/build/dist/*/*.zip

      # 读取版本信息
      - name: Read version
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: assets/app_version.json
      - name: Echo version
        run: echo "${{ fromJson(steps.version.outputs.content).version }}"
      - name: Echo version content
        run: echo "${{ fromJson(steps.version.outputs.content).version_desc }}"

      #上传至Release
      - name: Upload Release
        uses: softprops/action-gh-release@v1
        with:
          name: "${{ fromJson(steps.version.outputs.content).version }}"
          body: "${{ fromJson(steps.version.outputs.content).version_desc }}"
          prerelease: ${{ fromJson(steps.version.outputs.content).prerelease }}
          token: ${{ secrets.TOKEN }}
          files: |
            simple_live_app/build/dist/*/*.msix
            simple_live_app/build/dist/*/*.zip

      #完成
      - run: echo "🍏 Windows job's status is ${{ job.status }}."
